[{"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\index.js":"1","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\reportWebVitals.js":"2","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\App.js":"3","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\Home\\Home.js":"4","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\AlertComponent\\AlertComponent.js":"5","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\LoginForm\\LoginForm.js":"6","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\RegistrationForm\\RegistrationForm.js":"7","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\Header\\Header.js":"8","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\Dashboard\\Dashboard.js":"9","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\constants\\apiConstants.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1821,"mtime":1609334158333,"results":"14","hashOfConfig":"12"},{"size":749,"mtime":1609395482779,"results":"15","hashOfConfig":"12"},{"size":1121,"mtime":1608191393004,"results":"16","hashOfConfig":"12"},{"size":8799,"mtime":1609350525757,"results":"17","hashOfConfig":"12"},{"size":9371,"mtime":1609322562732,"results":"18","hashOfConfig":"12"},{"size":2404,"mtime":1609351033993,"results":"19","hashOfConfig":"12"},{"size":1145,"mtime":1608227999259,"results":"20","hashOfConfig":"12"},{"size":121,"mtime":1608227131073,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"p2bfts",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\index.js",[],["47","48"],"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\App.js",[],"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\Home\\Home.js",["49","50","51","52","53"],"import React, {useState} from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../constants/apiConstants';\r\nfunction Home(props) {\r\n    const session_user_id = sessionStorage.id;\r\n    let loggedIn = true\r\n    const [state , setState] = useState({        \r\n        loggedIn\r\n    })\r\n    if(session_user_id == null){\r\n        loggedIn = false\r\n    }\r\n\r\n    console.log('logged in check :',loggedIn);\r\n    if(loggedIn == false){\r\n        props.updateTitle('Diabetes management')\r\n        props.history.push('/');\r\n    }\r\n    return(\r\n        <div className=\"mt-2\">\r\n           Welcome {sessionStorage.id} - {sessionStorage.email}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Home);","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\AlertComponent\\AlertComponent.js",[],"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\LoginForm\\LoginForm.js",["54","55","56","57","58","59","60"],"import React, {useState} from 'react';\r\n//import axios from 'axios';\r\nimport './LoginForm.css';\r\nimport {API_BASE_URL, ACCESS_TOKEN_NAME} from '../../constants/apiConstants';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { GoogleLogin } from 'react-google-login';\r\n\r\n//  client id : 605293844765-f1ssb58dhs05b5516pbn5j89un0iahjb.apps.googleusercontent.com\r\n// client secret : Wtlzehbrz8XaOEjia_eZZntq\r\n\r\nconst clientId = '605293844765-f1ssb58dhs05b5516pbn5j89un0iahjb.apps.googleusercontent.com';\r\nfunction LoginForm(props) {\r\n    let loggedIn = false\r\n    const [state , setState] = useState({\r\n        email : \"\",\r\n        password : \"\",\r\n        successMessage: null,\r\n        loggedIn\r\n    })\r\n    const session_user_id = sessionStorage.id;\r\n    console.log('session_user_id :',session_user_id);\r\n    if(session_user_id){\r\n        loggedIn = true\r\n    }\r\n    if(loggedIn == true){\r\n        props.updateTitle('home')\r\n        props.history.push('/home');\r\n    }\r\n    const handleChange = (e) => {\r\n        const {id , value} = e.target   \r\n        setState(prevState => ({\r\n            ...prevState,\r\n            [id] : value\r\n        }))\r\n    }\r\n\r\n    const handleSubmitClick = (e) => {\r\n        e.preventDefault();\r\n        console.log('state.password :',state.password);\r\n        if((state.email !== '' || state.email !== null) && (state.password !== '' || state.password !== null)) {\r\n            sendDetailsToServer()    \r\n        } else {\r\n            props.showError('Enter valid email and password');\r\n        }\r\n    }\r\n\r\n    const sendDetailsToServer = () => {\r\n        if(state.email.length && state.password.length) {\r\n            console.log('login details here');\r\n            props.showError(null);\r\n            // POST request using fetch with error handling\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\"email\":state.email, \"password\":state.password})\r\n            };\r\n            fetch('http://localhost:5000/api/userlogin', requestOptions)\r\n                .then(async response => {\r\n                    const data = await response.json();\r\n                   \r\n                    console.log('response data:',data.status);\r\n                    // check for error response\r\n                    if (data.status == 200) {\r\n                        console.log('response :',response);\r\n                        setState(prevState => ({\r\n                            ...prevState,\r\n                            'successMessage' : 'Login successful.Redirecting to home page..',\r\n                            'loggedIn' : true\r\n                        }))\r\n                        sessionStorage.setItem('id', data.body[0].id);\r\n                        sessionStorage.setItem('email',data.body[0].email);\r\n                        sessionStorage.setItem('is_active',data.body[0].is_active);\r\n                        sessionStorage.setItem('account_type',data.body[0].account_type);\r\n                        redirectToHome();\r\n                        props.showError(null)\r\n                    }\r\n                    else if(data.status == 204){\r\n                        props.showError(\"Your user account in not active\");\r\n                    }\r\n                    else{\r\n                        props.showError(\"Username does not exists\");\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    //this.setState({ errorMessage: error.toString() });\r\n                    console.error('There was an error!', error);\r\n                });\r\n  \r\n        } else {\r\n            props.showError('Please enter valid username and password')    \r\n        }\r\n        \r\n    }\r\n    const redirectToHome = () => {\r\n        props.updateTitle('Home')\r\n        props.history.push('/home');\r\n    }\r\n    const redirectToRegister = () => {\r\n        props.history.push('/register'); \r\n        props.updateTitle('Register');\r\n    }\r\n    const onSuccess = (res) => {\r\n        console.log('[Login Success] currentUser:',res.profileObj);\r\n        // google login \r\n        if(res.profileObj.email && res.profileObj.googleId) {\r\n            console.log('login google details here');\r\n            props.showError(null);\r\n            // POST request using fetch with error handling\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\"email\":res.profileObj.email, \"googleId\":res.profileObj.googleId})\r\n            };\r\n            fetch('http://localhost:5000/api/google_login', requestOptions)\r\n                .then(async response => {\r\n                    const data = await response.json();\r\n                   \r\n                    console.log('response data:',data.status);\r\n                    // check for error response\r\n                    if (data.status == 200) {\r\n                        console.log('response :',response);\r\n                        setState(prevState => ({\r\n                            ...prevState,\r\n                            'successMessage' : 'Login successful.Redirecting to home page..',\r\n                            'loggedIn' : true\r\n                        }))\r\n                        sessionStorage.setItem('id', data.body[0].id);\r\n                        sessionStorage.setItem('email',data.body[0].email);\r\n                        sessionStorage.setItem('is_active',data.body[0].is_active);\r\n                        sessionStorage.setItem('account_type',data.body[0].account_type);\r\n                        redirectToHome();\r\n                        props.showError(null)\r\n                    }\r\n                    else if(data.status == 204){\r\n                        props.showError(\"Your user account in not active\");\r\n                    }\r\n                    else{\r\n                        props.showError(\"Username does not exists\");\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    //this.setState({ errorMessage: error.toString() });\r\n                    console.error('There was an error!', error);\r\n                });\r\n  \r\n        } else {\r\n            props.showError('Invalid user account')    \r\n        }\r\n    }\r\n    const onFailure = (res) => {\r\n        console.log('[Login Failed] res:',res);\r\n    }\r\n    console.log('logged in check :',loggedIn);\r\n    return(\r\n        \r\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\r\n          \r\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\r\n                {state.successMessage}\r\n            </div>\r\n            <form>\r\n                <div className=\"form-group text-left\">\r\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                <input type=\"email\" \r\n                       className=\"form-control\" \r\n                       id=\"email\" \r\n                       aria-describedby=\"emailHelp\" \r\n                       placeholder=\"Enter email\" \r\n                       value={state.email}\r\n                       onChange={handleChange}\r\n                />\r\n                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div className=\"form-group text-left\">\r\n                <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                <input type=\"password\" \r\n                       className=\"form-control\" \r\n                       id=\"password\" \r\n                       placeholder=\"Password\"\r\n                       value={state.password}\r\n                       onChange={handleChange} \r\n                />\r\n                </div>\r\n                <div className=\"form-check\">\r\n                </div>\r\n                <button \r\n                    type=\"submit\" \r\n                    className=\"btn btn-primary\"\r\n                    onClick={handleSubmitClick}\r\n                >Submit</button>\r\n            </form>\r\n           \r\n            <span>or</span>\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                buttonText=\"Login\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n                style={{ marginTop: '100px' }}\r\n                isSignedIn={true}            \r\n            />\r\n\r\n            <div className=\"registerMessage\">\r\n                <span>Dont have an account? </span>\r\n                <span className=\"loginText\" onClick={() => redirectToRegister()}>Register</span> \r\n            </div>\r\n \r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default withRouter(LoginForm);","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\RegistrationForm\\RegistrationForm.js",["61","62","63","64","65","66"],"import React, {useState} from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { GoogleLogin } from 'react-google-login';\r\n\r\nconst clientId = '605293844765-f1ssb58dhs05b5516pbn5j89un0iahjb.apps.googleusercontent.com';\r\nfunction RegistrationForm(props) {\r\n    const [state , setState] = useState({\r\n        email : \"\",\r\n        password : \"\",\r\n        confirmPassword : \"\",\r\n        successMessage: null,\r\n        emailError : \"\"\r\n    })\r\n    const handleChange = (e) => {\r\n        const {id , value} = e.target   \r\n        setState(prevState => ({\r\n            ...prevState,\r\n            [id] : value\r\n        }))\r\n    }\r\n    //validations\r\n    const validate = () => {\r\n        if(state.email == '' || state.password == ''){\r\n            props.showError('Enter valid email and password');\r\n            return false;\r\n        }else{\r\n            if(typeof state.email !== \"undefined\"){\r\n                if (/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(state.email)) { \r\n                    console.log('result true');   \r\n                    props.showError(null); \r\n                    //return true;   \r\n                }else{\r\n                    console.log('result false')      \r\n                    props.showError('Please enter valid email address.');  \r\n                    return false;\r\n                }\r\n            }\r\n            if(state.password !== state.confirmPassword) {                \r\n                props.showError('Passwords do not match');  \r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n        \r\n    }\r\n    //submit form\r\n    const handleSubmitClick = (e) => {\r\n        e.preventDefault();\r\n        const isValid = validate();\r\n        if(isValid){\r\n            sendDetailsToServer()  \r\n        }\r\n            \r\n    }\r\n    // api call to send details to server\r\n    const sendDetailsToServer = () => {\r\n        if(state.email.length && state.password.length) {\r\n            console.log('send details here');\r\n            props.showError(null);\r\n            // POST request using fetch with error handling\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\"email\":state.email, \"password\":state.password})\r\n            };\r\n            fetch('http://localhost:5000/api/registerUser', requestOptions)\r\n                .then(async response => {\r\n                    const data = await response.json();\r\n                    console.log('response.status - ',data.status);\r\n                    // check for error response\r\n                    if (data.status == 200) {\r\n                        console.log('response :',response);\r\n                        setState(prevState => ({\r\n                            ...prevState,\r\n                            'successMessage' : 'Registration successful. Activatation link has been send to your mail,activate your account to login..'\r\n                        }))\r\n                        //redirectToLogin();\r\n                        props.showError(null)    \r\n                        //this.setState({ postId: data.id })\r\n                    }else if(data.status == 400){                       \r\n                        props.showError(\"Email address already exist\");\r\n                    }else{\r\n                        // get error message from body or default to response status\r\n                        const error = (data && data.message) || response.status;\r\n                        props.showError(error);\r\n                        //return Promise.reject(error);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    //this.setState({ errorMessage: error.toString() });\r\n                    console.error('There was an error!', error);\r\n                });\r\n  \r\n        } else {\r\n            props.showError('Please enter valid username and password')    \r\n        }\r\n        \r\n    }\r\n    const redirectToLogin = () => {\r\n        props.history.push('/login'); \r\n        props.updateTitle('Login');\r\n    }\r\n    const onSuccess = (res) => {\r\n        console.log('[Login Success] currentUser:',res.profileObj);\r\n        console.log('[Login Success] google id:',res.profileObj.googleId);\r\n        console.log('[Login Success] email:',res.profileObj.email);\r\n\r\n        // google register\r\n        if(res.profileObj.googleId && res.profileObj.email) {\r\n            console.log('send google reg details here');\r\n            props.showError(null);\r\n            // POST request using fetch with error handling\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\"email\":res.profileObj.email, \"googleId\":res.profileObj.googleId})\r\n            };\r\n            fetch('http://localhost:5000/api/google_registeration', requestOptions)\r\n                .then(async response => {\r\n                    const data = await response.json();\r\n                    console.log('response.status - ',data.status);\r\n                    // check for error response\r\n                    if (data.status == 200) {\r\n                        console.log('response :',response);\r\n                        setState(prevState => ({\r\n                            ...prevState,\r\n                            'successMessage' : 'Registration successful. Activatation link has been send to your mail,activate your account to login..'\r\n                        }))\r\n                        //redirectToLogin();\r\n                        props.showError(null)    \r\n                        //this.setState({ postId: data.id })\r\n                    }else if(data.status == 400){                       \r\n                        props.showError(\"Email address already exist\");\r\n                    }else{\r\n                        // get error message from body or default to response status\r\n                        const error = (data && data.message) || response.status;\r\n                        props.showError(error);\r\n                        //return Promise.reject(error);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    //this.setState({ errorMessage: error.toString() });\r\n                    console.error('There was an error!', error);\r\n                });\r\n  \r\n        } else {\r\n            props.showError('Invalid user email')    \r\n        }\r\n\r\n    }\r\n    const onFailure = (res) => {\r\n        console.log('[Login Failed] res:',res);\r\n    } \r\n  return(\r\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\r\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\r\n                {state.successMessage}\r\n            </div>\r\n            <form>\r\n                <div className=\"form-group text-left\">\r\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                <input type=\"email\" \r\n                       className=\"form-control\" \r\n                       id=\"email\" \r\n                       aria-describedby=\"emailHelp\" \r\n                       placeholder=\"Enter email\"\r\n                       value={state.email}\r\n                       onChange={handleChange}\r\n                />\r\n                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div className=\"form-group text-left\">\r\n                    <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                    <input type=\"password\" \r\n                        className=\"form-control\" \r\n                        id=\"password\" \r\n                        placeholder=\"Password\"\r\n                        value={state.password}\r\n                        onChange={handleChange} \r\n                    />\r\n                </div>\r\n                <div className=\"form-group text-left\">\r\n                    <label htmlFor=\"exampleInputPassword1\">Confirm Password</label>\r\n                    <input type=\"password\" \r\n                        className=\"form-control\" \r\n                        id=\"confirmPassword\" \r\n                        placeholder=\"Confirm Password\"\r\n                        value={state.confirmPassword}\r\n                        onChange={handleChange} \r\n                    />\r\n                </div>\r\n                <button \r\n                    type=\"submit\" \r\n                    className=\"btn btn-primary\"\r\n                    onClick={handleSubmitClick}\r\n                >\r\n                    Register\r\n                </button>\r\n            </form>\r\n            \r\n            <span>or</span>\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                buttonText=\"Register\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n                style={{ marginTop: '100px' }}\r\n                isSignedIn={true}            \r\n            />\r\n            <div className=\"loginMessage\">\r\n                <span>Have an account? </span>\r\n                <span className=\"registerText\" onClick={() => redirectToLogin()}>Login</span> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(RegistrationForm);","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\Header\\Header.js",["67"],"import React from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useGoogleLogout } from 'react-google-login';\r\n//import { ACCESS_TOKEN_NAME } from '../../constants/apiConstants';\r\n\r\nconst clientId = '605293844765-f1ssb58dhs05b5516pbn5j89un0iahjb.apps.googleusercontent.com';\r\n\r\nfunction Header(props) {\r\n    const capitalize = (s) => {\r\n        if (typeof s !== 'string') return ''\r\n        return s.charAt(0).toUpperCase() + s.slice(1)\r\n    }\r\n    let title = capitalize(props.location.pathname.substring(1,props.location.pathname.length))\r\n    if(props.location.pathname === '/') {\r\n        title = 'Diabetes management'\r\n    }\r\n    function renderLogout() {\r\n        if(props.location.pathname === '/home'){\r\n            return(\r\n                <div className=\"ml-auto\">\r\n                    {(sessionStorage.account_type == '1') ? \r\n                    <button className=\"btn btn-danger\" onClick={ signOut }>Logout</button>\r\n                    :\r\n                    <button className=\"btn btn-danger\" onClick={() => handleLogout()}>Logout</button>\r\n                    }\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    const onLogoutSuccess = (res) => {\r\n        //alert('Logged out successfully');\r\n        sessionStorage.removeItem('id');\r\n        sessionStorage.removeItem('email');\r\n        sessionStorage.removeItem('is_active');\r\n        sessionStorage.removeItem('account_type');\r\n        props.updateTitle('Diabetes management');\r\n        props.history.push('/');\r\n    };\r\n\r\n    const onFailure = () => {\r\n        console.log('Handle failure cases');\r\n    };\r\n    const { signOut } = useGoogleLogout({\r\n        clientId,\r\n        onLogoutSuccess,\r\n        onFailure,\r\n    });\r\n    function handleLogout() {\r\n        sessionStorage.removeItem('id');\r\n        sessionStorage.removeItem('email');\r\n        sessionStorage.removeItem('is_active');\r\n        sessionStorage.removeItem('account_type');\r\n        props.updateTitle('Diabetes management');\r\n        props.history.push('/');\r\n        \r\n    }\r\n    return(\r\n        <nav className=\"navbar navbar-dark bg-primary\">\r\n            <div className=\"row col-12 d-flex justify-content-center text-white\">\r\n                <span className=\"h3\">{props.title || title}</span>\r\n                {renderLogout()}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default withRouter(Header);","C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\components\\Dashboard\\Dashboard.js",[],"C:\\Users\\pooja\\gleecus_project\\react_frontend\\src\\constants\\apiConstants.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":27},{"ruleId":"72","severity":1,"message":"76","line":3,"column":29,"nodeType":"74","messageId":"75","endLine":3,"endColumn":41},{"ruleId":"72","severity":1,"message":"77","line":7,"column":12,"nodeType":"74","messageId":"75","endLine":7,"endColumn":17},{"ruleId":"72","severity":1,"message":"78","line":7,"column":20,"nodeType":"74","messageId":"75","endLine":7,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":15,"column":17,"nodeType":"81","messageId":"82","endLine":15,"endColumn":19},{"ruleId":"72","severity":1,"message":"76","line":4,"column":9,"nodeType":"74","messageId":"75","endLine":4,"endColumn":21},{"ruleId":"72","severity":1,"message":"73","line":4,"column":23,"nodeType":"74","messageId":"75","endLine":4,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":25,"column":17,"nodeType":"81","messageId":"82","endLine":25,"endColumn":19},{"ruleId":"79","severity":1,"message":"80","line":63,"column":37,"nodeType":"81","messageId":"82","endLine":63,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":77,"column":41,"nodeType":"81","messageId":"82","endLine":77,"endColumn":43},{"ruleId":"79","severity":1,"message":"80","line":120,"column":37,"nodeType":"81","messageId":"82","endLine":120,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":134,"column":41,"nodeType":"81","messageId":"82","endLine":134,"endColumn":43},{"ruleId":"79","severity":1,"message":"80","line":23,"column":24,"nodeType":"81","messageId":"82","endLine":23,"endColumn":26},{"ruleId":"79","severity":1,"message":"80","line":23,"column":48,"nodeType":"81","messageId":"82","endLine":23,"endColumn":50},{"ruleId":"79","severity":1,"message":"80","line":71,"column":37,"nodeType":"81","messageId":"82","endLine":71,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":80,"column":42,"nodeType":"81","messageId":"82","endLine":80,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":124,"column":37,"nodeType":"81","messageId":"82","endLine":124,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":133,"column":42,"nodeType":"81","messageId":"82","endLine":133,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":21,"column":51,"nodeType":"81","messageId":"82","endLine":21,"endColumn":53},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'ACCESS_TOKEN_NAME' is defined but never used.","Identifier","unusedVar","'API_BASE_URL' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]